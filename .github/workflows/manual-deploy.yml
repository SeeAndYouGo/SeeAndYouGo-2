name: SeeAndYouGo Manual Deploy

on:
  workflow_dispatch:
    inputs:
      deploy_target:
        description: 'Î∞∞Ìè¨ ÎåÄÏÉÅ ÏÑ†ÌÉù'
        required: true
        type: choice
        options:
          - all
          - backend
          - frontend

jobs:
  build-backend:
    if: ${{ inputs.deploy_target == 'all' || inputs.deploy_target == 'backend' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x backend/gradlew

      - name: Build with Gradle
        run: |
          cd backend
          ./gradlew clean bootJar

      - name: Build Backend Docker Image
        run: |
          cd backend
          docker build \
            -t seeandyougo-backend:${{ github.sha }} \
            -t seeandyougo-backend:latest \
            .

      - name: Save Backend Docker Image
        run: |
          docker save seeandyougo-backend:latest | gzip > backend-image.tar.gz

      - name: Upload Backend Image Artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend-image
          path: backend-image.tar.gz
          retention-days: 1

  build-frontend:
    if: ${{ inputs.deploy_target == 'all' || inputs.deploy_target == 'frontend' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build Frontend Docker Image
        run: |
          docker build \
            -t seeandyougo-frontend:${{ github.sha }} \
            -t seeandyougo-frontend:latest \
            -f Dockerfile \
            .

      - name: Save Frontend Docker Image
        run: |
          docker save seeandyougo-frontend:latest | gzip > frontend-image.tar.gz

      - name: Upload Frontend Image Artifact
        uses: actions/upload-artifact@v3
        with:
          name: frontend-image
          path: frontend-image.tar.gz
          retention-days: 1

  deploy:
    needs: [build-backend, build-frontend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download Backend Image
        if: ${{ inputs.deploy_target == 'all' || inputs.deploy_target == 'backend' }}
        uses: actions/download-artifact@v3
        with:
          name: backend-image
        continue-on-error: true

      - name: Download Frontend Image
        if: ${{ inputs.deploy_target == 'all' || inputs.deploy_target == 'frontend' }}
        uses: actions/download-artifact@v3
        with:
          name: frontend-image
        continue-on-error: true

      - name: Copy images to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          source: "*.tar.gz"
          target: "/tmp/seeandyougo-deploy"

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            set -e
            cd /tmp/seeandyougo-deploy
            
            echo "=========================================="
            echo "üöÄ SeeAndYouGo Deployment Started"
            echo "Target: ${{ inputs.deploy_target }}"
            echo "=========================================="
            
            # Backend Î∞∞Ìè¨
            if [ -f backend-image.tar.gz ]; then
              echo "üì¶ Loading backend image..."
              docker load < backend-image.tar.gz
              
              echo "üîÑ Stopping old backend container..."
              docker stop seeandyougo || true
              docker rm seeandyougo || true
              
              echo "üöÄ Starting new backend container..."
              docker run -d \
                --name seeandyougo \
                --restart always \
                --network backbone \
                -p 8080:8080 \
                -e TZ=Asia/Seoul \
                seeandyougo-backend:latest
              
              echo "‚úÖ Backend deployment completed!"
            fi
            
            # Frontend Î∞∞Ìè¨
            if [ -f frontend-image.tar.gz ]; then
              echo "üì¶ Loading frontend image..."
              docker load < frontend-image.tar.gz
              
              echo "üîÑ Stopping old frontend container..."
              docker stop seeandyougo-nginx || true
              docker rm seeandyougo-nginx || true
              
              echo "üöÄ Starting new frontend container..."
              docker run -d \
                --name seeandyougo-nginx \
                --restart always \
                --network backbone \
                -p 80:80 \
                -p 443:443 \
                -e TZ=Asia/Seoul \
                seeandyougo-frontend:latest
              
              echo "‚úÖ Frontend deployment completed!"
            fi
            
            # Ï†ïÎ¶¨
            echo "üßπ Cleaning up..."
            rm -rf /tmp/seeandyougo-deploy
            docker system prune -f
            
            echo "=========================================="
            echo "‚ú® Deployment Finished Successfully!"
            echo "=========================================="

      - name: Verify Deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            echo "=========================================="
            echo "üìä Deployment Verification"
            echo "=========================================="
            
            echo ""
            echo "üê≥ Running Containers:"
            docker ps --filter "name=seeandyougo" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            echo ""
            echo "=========================================="
            
            if [ "${{ inputs.deploy_target }}" == "all" ] || [ "${{ inputs.deploy_target }}" == "backend" ]; then
              echo ""
              echo "üìã Backend Logs (last 30 lines):"
              docker logs --tail 30 seeandyougo
              echo ""
              
              # Ìó¨Ïä§Ï≤¥ÌÅ¨ (ÏòµÏÖò)
              echo "üè• Backend Health Check:"
              sleep 5
              curl -f http://localhost:8080/actuator/health || echo "‚ö†Ô∏è Health check endpoint not available"
            fi
            
            if [ "${{ inputs.deploy_target }}" == "all" ] || [ "${{ inputs.deploy_target }}" == "frontend" ]; then
              echo ""
              echo "üìã Frontend Logs (last 20 lines):"
              docker logs --tail 20 seeandyougo-nginx
              echo ""
              
              # Nginx ÏÉÅÌÉú ÌôïÏù∏
              echo "üè• Frontend Health Check:"
              curl -f http://localhost/ > /dev/null && echo "‚úÖ Frontend is running!" || echo "‚ö†Ô∏è Frontend might have issues"
            fi
            
            echo ""
            echo "=========================================="
            echo "‚úÖ Verification Complete!"
            echo "=========================================="

      - name: Notify Deployment Result
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Î∞∞Ìè¨ ÏÑ±Í≥µ!"
            echo "Target: ${{ inputs.deploy_target }}"
          else
            echo "‚ùå Î∞∞Ìè¨ Ïã§Ìå®!"
            echo "Î°úÍ∑∏Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî."
          fi
