name: SeeAndYouGo Manual Deploy

on:
  workflow_dispatch:
    inputs:
      deploy_target:
        description: '배포 대상 선택'
        required: true
        type: choice
        options:
          - all
          - backend
          - frontend

jobs:
  build-backend:
    if: ${{ inputs.deploy_target == 'all' || inputs.deploy_target == 'backend' }}
    runs-on: ubuntu-latest
    steps:
      - name: "[Backend] 코드 체크아웃"
        uses: actions/checkout@v3

      - name: "[Backend] JDK 11 설정"
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: "[Backend] Gradle 실행 권한 부여"
        run: chmod +x backend/gradlew

      - name: "[Backend] 환경 파일 준비"
        run: |
          cd backend/src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > application.yml
          echo "${{ secrets.APPLICATION_PROD_YML }}" > application-prod.yaml
          echo "${{ secrets.KEY_YML }}" > key.yml
        shell: bash

      - name: "[Backend] Gradle 빌드"
        run: |
          cd backend
          ./gradlew clean bootJar

      - name: "[Backend] Docker 이미지 빌드"
        run: |
          cd backend
          docker build \
            -t seeandyougo-backend:${{ github.sha }} \
            -t seeandyougo-backend:latest \
            .

      # ✅ gzip → tar로 변경
      - name: "[Backend] Docker 이미지 저장"
        run: |
          docker save seeandyougo-backend:latest > backend-image.tar

      - name: "[Backend] 아티팩트 업로드"
        uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: backend-image.tar
          retention-days: 1

  build-frontend:
    if: ${{ inputs.deploy_target == 'all' || inputs.deploy_target == 'frontend' }}
    runs-on: ubuntu-latest
    steps:
      - name: "[Frontend] 코드 체크아웃"
        uses: actions/checkout@v3

      - name: "[Frontend] 환경 파일 준비"
        run: |
          cd frontend
          echo "${{ secrets.FRONTEND_ENV }}" > .env
        shell: bash

      - name: "[Frontend] Docker 이미지 빌드"
        run: |
          docker build \
            -t seeandyougo-frontend:${{ github.sha }} \
            -t seeandyougo-frontend:latest \
            -f Dockerfile \
            .

      # ✅ gzip → tar로 변경
      - name: "[Frontend] Docker 이미지 저장"
        run: |
          docker save seeandyougo-frontend:latest > frontend-image.tar

      - name: "[Frontend] 아티팩트 업로드"
        uses: actions/upload-artifact@v4
        with:
          name: frontend-image
          path: frontend-image.tar
          retention-days: 1

  deploy:
    needs: [build-backend, build-frontend]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: "[배포] Backend 이미지 다운로드"
        if: ${{ inputs.deploy_target == 'all' || inputs.deploy_target == 'backend' }}
        uses: actions/download-artifact@v4
        with:
          name: backend-image
        continue-on-error: true

      - name: "[배포] Frontend 이미지 다운로드"
        if: ${{ inputs.deploy_target == 'all' || inputs.deploy_target == 'frontend' }}
        uses: actions/download-artifact@v4
        with:
          name: frontend-image
        continue-on-error: true

      - name: "[배포] 서버로 파일 전송"
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          source: "*.tar"
          target: "/tmp/seeandyougo-deploy"
          timeout: 30m
          tar_exec: false    # 이중 압축/해제 비활성화

      - name: "[배포] 서버에서 배포 실행"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          timeout: 30m
          script: |
            set -e
            cd /tmp/seeandyougo-deploy
            
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "🚀 SeeAndYouGo 배포 시작"
            echo "📦 배포 대상: ${{ inputs.deploy_target }}"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            # Backend 배포
            if [ -f backend-image.tar ]; then
              echo ""
              echo "[Backend] Docker 이미지 로드 중..."
              docker load < backend-image.tar > /dev/null 2>&1
              
              echo "[Backend] 기존 컨테이너 중지 중..."
              docker stop seeandyougo > /dev/null 2>&1 || true
              docker rm seeandyougo > /dev/null 2>&1 || true
              
              echo "[Backend] 새 컨테이너 시작 중..."
              docker run -d \
                --name seeandyougo \
                --restart always \
                --network backbone \
                -p 8080:8080 \
                -e TZ=Asia/Seoul \
                seeandyougo-backend:latest > /dev/null 2>&1
              
              echo "✅ [Backend] 배포 완료"
            fi
            
            # Frontend 배포
            if [ -f frontend-image.tar ]; then
              echo ""
              echo "[Frontend] Docker 이미지 로드 중..."
              docker load < frontend-image.tar > /dev/null 2>&1
              
              echo "[Frontend] 기존 컨테이너 중지 중..."
              docker stop seeandyougo-nginx > /dev/null 2>&1 || true
              docker rm seeandyougo-nginx > /dev/null 2>&1 || true
              
              echo "[Frontend] 새 컨테이너 시작 중..."
              docker run -d \
                --name seeandyougo-nginx \
                --restart always \
                --network backbone \
                -p 80:80 \
                -p 443:443 \
                -e TZ=Asia/Seoul \
                seeandyougo-frontend:latest > /dev/null 2>&1
              
              echo "✅ [Frontend] 배포 완료"
            fi
            
            # 정리
            echo ""
            echo "[시스템] 임시 파일 정리 중..."
            rm -rf /tmp/seeandyougo-deploy
            docker system prune -f > /dev/null 2>&1
            
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "✨ 배포 완료"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: "[검증] 배포 상태 확인"
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          timeout: 15m
          script: |
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "📊 배포 검증"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            
            if [ "${{ inputs.deploy_target }}" == "all" ] || [ "${{ inputs.deploy_target }}" == "backend" ]; then
              echo ""
              echo "[Backend] 최근 로그:"
              docker logs --tail 20 seeandyougo 2>&1 | head -20
              echo ""
              
              echo "[Backend] 헬스체크:"
              sleep 3
              if curl -f http://localhost:8080/actuator/health > /dev/null 2>&1; then
                echo "✅ Backend 정상 작동 중"
              else
                echo "⚠️  헬스체크 엔드포인트 없음 (서버는 실행 중)"
              fi
            fi
            
            if [ "${{ inputs.deploy_target }}" == "all" ] || [ "${{ inputs.deploy_target }}" == "frontend" ]; then
              echo ""
              echo "[Frontend] 최근 로그:"
              docker logs --tail 15 seeandyougo-nginx 2>&1 | head -15
              echo ""
              
              echo "[Frontend] 헬스체크:"
              if curl -f http://localhost/ > /dev/null 2>&1; then
                echo "✅ Frontend 정상 작동 중"
              else
                echo "⚠️  Frontend 응답 없음"
              fi
            fi
            
            echo ""
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
            echo "✅ 검증 완료"
            echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

      - name: "[완료] 배포 결과 알림"
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ 배포 성공"
            echo "📦 배포 대상: ${{ inputs.deploy_target }}"
          else
            echo "❌ 배포 실패"
            echo "📋 로그를 확인해주세요"
          fi
